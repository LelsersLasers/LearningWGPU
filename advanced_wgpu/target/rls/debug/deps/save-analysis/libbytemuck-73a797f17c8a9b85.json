{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0","program":"C:\\Users\\milla\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","bytemuck","--edition=2018","C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck_derive\"","--cfg","feature=\"derive\"","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=73a797f17c8a9b85","-C","extra-filename=-73a797f17c8a9b85","--out-dir","c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps","--extern","bytemuck_derive=c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps\\bytemuck_derive-91b2c1d20bd778f8.dll","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\milla\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps\\libbytemuck-73a797f17c8a9b85.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[9235287423576104987,0]},"crate_root":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src","external_crates":[{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","num":5,"id":{"name":"bytemuck_derive","disambiguator":[8788414257316514135,0]}}],"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2800,"byte_end":2801,"line_start":81,"line_end":81,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3006,"byte_end":3007,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3032,"byte_end":3033,"line_start":97,"line_end":97,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3077,"byte_end":3078,"line_start":99,"line_end":99,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3115,"byte_end":3116,"line_start":102,"line_end":102,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3155,"byte_end":3156,"line_start":105,"line_end":105,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3193,"byte_end":3194,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3235,"byte_end":3236,"line_start":111,"line_end":111,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"TransparentWrapper","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":225},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3295,"byte_end":3308,"line_start":115,"line_end":115,"column_start":3,"column_end":16},"alias_span":null,"name":"AnyBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":228},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3310,"byte_end":3327,"line_start":115,"line_end":115,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":230},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3329,"byte_end":3339,"line_start":115,"line_end":115,"column_start":37,"column_end":47},"alias_span":null,"name":"Contiguous","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":227},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3341,"byte_end":3349,"line_start":115,"line_end":115,"column_start":49,"column_end":57},"alias_span":null,"name":"NoUninit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":224},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3351,"byte_end":3354,"line_start":115,"line_end":115,"column_start":59,"column_end":62},"alias_span":null,"name":"Pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":229},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3358,"byte_end":3376,"line_start":116,"line_end":116,"column_start":3,"column_end":21},"alias_span":null,"name":"TransparentWrapper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":226},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3378,"byte_end":3386,"line_start":116,"line_end":116,"column_start":23,"column_end":31},"alias_span":null,"name":"Zeroable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":236},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":905},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":86}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2682,"byte_end":2720,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11391,"byte_end":11430,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11432,"byte_end":11479,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11480,"byte_end":11483,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11484,"byte_end":11564,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11565,"byte_end":11639,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11640,"byte_end":11694,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11695,"byte_end":11698,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features =","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11699,"byte_end":11764,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ [\"extern_crate_alloc\"]}`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11765,"byte_end":11793,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11997,"byte_end":12005,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"pub fn cast_box<A: NoUninit, B: AnyBitPattern>(Box<A>) -> Box<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11920,"byte_end":11979,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":11980,"byte_end":11989,"line_start":22,"line_end":22,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12467,"byte_end":12479,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"pub fn try_cast_box<A: NoUninit, B: AnyBitPattern>(Box<A>)\n-> Result<Box<B>, (PodCastError, Box<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12119,"byte_end":12189,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12190,"byte_end":12193,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12194,"byte_end":12261,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12262,"byte_end":12265,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12266,"byte_end":12280,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12281,"byte_end":12284,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12285,"byte_end":12359,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12360,"byte_end":12376,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12377,"byte_end":12449,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12450,"byte_end":12459,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13360,"byte_end":13374,"line_start":62,"line_end":62,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"pub fn try_zeroed_box<T: Zeroable>() -> Result<Box<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":12940,"byte_end":13007,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13008,"byte_end":13011,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13012,"byte_end":13087,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13088,"byte_end":13167,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13168,"byte_end":13241,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13242,"byte_end":13279,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13280,"byte_end":13283,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13284,"byte_end":13298,"line_start":58,"line_end":58,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13299,"byte_end":13302,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13303,"byte_end":13342,"line_start":60,"line_end":60,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":13343,"byte_end":13352,"line_start":61,"line_end":61,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14499,"byte_end":14509,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"pub fn zeroed_box<T: Zeroable>() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14434,"byte_end":14481,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14482,"byte_end":14491,"line_start":91,"line_end":91,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14794,"byte_end":14808,"line_start":101,"line_end":101,"column_start":8,"column_end":22},"name":"try_zeroed_vec","qualname":"::allocation::try_zeroed_vec","value":"pub fn try_zeroed_vec<T: Zeroable>(usize) -> Result<Vec<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Vec<T>` of length and capacity exactly equal to `length` and all elements zeroed.\n \n ## Failure","sig":null,"attributes":[{"value":"/ Allocates a `Vec<T>` of length and capacity exactly equal to `length` and all elements zeroed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14568,"byte_end":14666,"line_start":96,"line_end":96,"column_start":1,"column_end":99}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14667,"byte_end":14671,"line_start":97,"line_end":97,"column_start":1,"column_end":5}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14672,"byte_end":14686,"line_start":98,"line_end":98,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14687,"byte_end":14690,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for the allocation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":14691,"byte_end":14786,"line_start":100,"line_end":100,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15054,"byte_end":15064,"line_start":111,"line_end":111,"column_start":8,"column_end":18},"name":"zeroed_vec","qualname":"::allocation::zeroed_vec","value":"pub fn zeroed_vec<T: Zeroable>(usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_vec`] but unwraps for you\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_vec`] but unwraps for you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15001,"byte_end":15046,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15613,"byte_end":15633,"line_start":126,"line_end":126,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"pub fn try_zeroed_slice_box<T: Zeroable>(usize) -> Result<Box<[T]>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15142,"byte_end":15204,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15205,"byte_end":15208,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15209,"byte_end":15284,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15285,"byte_end":15364,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15365,"byte_end":15438,"line_start":119,"line_end":119,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15439,"byte_end":15476,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15477,"byte_end":15480,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15481,"byte_end":15495,"line_start":122,"line_end":122,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15496,"byte_end":15499,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for the allocation.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15500,"byte_end":15595,"line_start":124,"line_end":124,"column_start":1,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":15596,"byte_end":15605,"line_start":125,"line_end":125,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16495,"byte_end":16511,"line_start":152,"line_end":152,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"pub fn zeroed_slice_box<T: Zeroable>(usize) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16412,"byte_end":16487,"line_start":151,"line_end":151,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16686,"byte_end":16700,"line_start":158,"line_end":158,"column_start":8,"column_end":22},"name":"cast_slice_box","qualname":"::allocation::cast_slice_box","value":"pub fn cast_slice_box<A: NoUninit, B: AnyBitPattern>(Box<[A]>) -> Box<[B]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16597,"byte_end":16668,"line_start":156,"line_end":156,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16669,"byte_end":16678,"line_start":157,"line_end":157,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":17192,"byte_end":17210,"line_start":175,"line_end":175,"column_start":8,"column_end":26},"name":"try_cast_slice_box","qualname":"::allocation::try_cast_slice_box","value":"pub fn try_cast_slice_box<A: NoUninit, B: AnyBitPattern>(Box<[A]>)\n-> Result<Box<[B]>, (PodCastError, Box<[A]>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Box<[T]>`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16829,"byte_end":16883,"line_start":164,"line_end":164,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16884,"byte_end":16887,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box<[T]>`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16888,"byte_end":16960,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16961,"byte_end":16964,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16965,"byte_end":16979,"line_start":168,"line_end":168,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16980,"byte_end":16983,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box<[T]>` must have the exact same","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":16984,"byte_end":17063,"line_start":170,"line_end":170,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":17064,"byte_end":17080,"line_start":171,"line_end":171,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Box<[T]>` must be the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":17081,"byte_end":17156,"line_start":172,"line_end":172,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":17157,"byte_end":17174,"line_start":173,"line_end":173,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":17175,"byte_end":17184,"line_start":174,"line_end":174,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18782,"byte_end":18790,"line_start":209,"line_end":209,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"pub fn cast_vec<A: NoUninit, B: AnyBitPattern>(Vec<A>) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18705,"byte_end":18764,"line_start":207,"line_end":207,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18765,"byte_end":18774,"line_start":208,"line_end":208,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19345,"byte_end":19357,"line_start":225,"line_end":225,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"pub fn try_cast_vec<A: NoUninit, B: AnyBitPattern>(Vec<A>)\n-> Result<Vec<B>, (PodCastError, Vec<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18904,"byte_end":18972,"line_start":213,"line_end":213,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18973,"byte_end":18976,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":18977,"byte_end":19044,"line_start":215,"line_end":215,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19045,"byte_end":19048,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19049,"byte_end":19063,"line_start":217,"line_end":217,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19064,"byte_end":19067,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19068,"byte_end":19142,"line_start":219,"line_end":219,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19143,"byte_end":19159,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Vec` must be the exact","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19160,"byte_end":19236,"line_start":221,"line_end":221,"column_start":1,"column_end":77}},{"value":"/   same.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19237,"byte_end":19248,"line_start":222,"line_end":222,"column_start":1,"column_end":12}},{"value":"/ * The start and end capacity in bytes of the `Vec` mest be the exact same.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19249,"byte_end":19327,"line_start":223,"line_end":223,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":19328,"byte_end":19337,"line_start":224,"line_end":224,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22858,"byte_end":22876,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"pub fn pod_collect_to_vec<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&[A]) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22257,"byte_end":22332,"line_start":280,"line_end":280,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22333,"byte_end":22336,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22337,"byte_end":22414,"line_start":282,"line_end":282,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22415,"byte_end":22418,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22419,"byte_end":22497,"line_start":284,"line_end":284,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22498,"byte_end":22501,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22502,"byte_end":22513,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22514,"byte_end":22536,"line_start":287,"line_end":287,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22537,"byte_end":22580,"line_start":288,"line_end":288,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22581,"byte_end":22645,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22646,"byte_end":22685,"line_start":290,"line_end":290,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22686,"byte_end":22754,"line_start":291,"line_end":291,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22755,"byte_end":22767,"line_start":292,"line_end":292,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22768,"byte_end":22836,"line_start":293,"line_end":293,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22837,"byte_end":22842,"line_start":294,"line_end":294,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":22843,"byte_end":22850,"line_start":295,"line_end":295,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":23508,"byte_end":23531,"line_start":316,"line_end":316,"column_start":11,"column_end":34},"name":"TransparentWrapperAlloc","qualname":"::allocation::TransparentWrapperAlloc","value":"TransparentWrapperAlloc<Inner: ?Sized>: TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" An extension trait for `TransparentWrapper` and alloc types.\n","sig":null,"attributes":[{"value":"/ An extension trait for `TransparentWrapper` and alloc types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":23433,"byte_end":23497,"line_start":315,"line_end":315,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":23651,"byte_end":23659,"line_start":318,"line_end":318,"column_start":6,"column_end":14},"name":"wrap_vec","qualname":"::allocation::TransparentWrapperAlloc::wrap_vec","value":"pub fn wrap_vec(Vec<Inner>) -> Vec<Self> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a vec of the inner type into a vec of the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the inner type into a vec of the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":23578,"byte_end":23645,"line_start":317,"line_end":317,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":24273,"byte_end":24281,"line_start":345,"line_end":345,"column_start":6,"column_end":14},"name":"wrap_box","qualname":"::allocation::TransparentWrapperAlloc::wrap_box","value":"pub fn wrap_box(Box<Inner>) -> Box<Self>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a box to the inner type into a box to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the inner type into a box to the wrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":24182,"byte_end":24243,"line_start":342,"line_end":342,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":24246,"byte_end":24255,"line_start":343,"line_end":343,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":24258,"byte_end":24267,"line_start":344,"line_end":344,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25183,"byte_end":25191,"line_start":367,"line_end":367,"column_start":6,"column_end":14},"name":"peel_vec","qualname":"::allocation::TransparentWrapperAlloc::peel_vec","value":"pub fn peel_vec(Vec<Self>) -> Vec<Inner> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a vec of the wrapper type into a vec of the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the wrapper type into a vec of the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25110,"byte_end":25177,"line_start":366,"line_end":366,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25806,"byte_end":25814,"line_start":394,"line_end":394,"column_start":6,"column_end":14},"name":"peel_box","qualname":"::allocation::TransparentWrapperAlloc::peel_box","value":"pub fn peel_box(Box<Self>) -> Box<Inner>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Convert a box to the wrapper type into a box to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the wrapper type into a box to the inner","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25715,"byte_end":25776,"line_start":391,"line_end":391,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25779,"byte_end":25788,"line_start":392,"line_end":392,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":25791,"byte_end":25800,"line_start":393,"line_end":393,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29751,"byte_end":29764,"line_start":48,"line_end":48,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27165,"byte_end":27244,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27245,"byte_end":27248,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27249,"byte_end":27306,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27307,"byte_end":27368,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27369,"byte_end":27448,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as `union`s. Notably, you can only cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27449,"byte_end":27559,"line_start":8,"line_end":8,"column_start":1,"column_end":111}},{"value":"/ *immutable* references and *owned* values into [`AnyBitPattern`] types, not","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27560,"byte_end":27639,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ *mutable* references.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27640,"byte_end":27665,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27666,"byte_end":27669,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27670,"byte_end":27749,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27750,"byte_end":27826,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27827,"byte_end":27830,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T: AnyBitPattern`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27831,"byte_end":27917,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ is also [`Zeroable`], but any `T: Zeroable` is not necessarily [`AnyBitPattern  ]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":27918,"byte_end":28003,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28004,"byte_end":28007,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28008,"byte_end":28020,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28021,"byte_end":28024,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28025,"byte_end":28118,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28119,"byte_end":28194,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both structs and enums. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28195,"byte_end":28275,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28276,"byte_end":28353,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28354,"byte_end":28432,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28433,"byte_end":28436,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28437,"byte_end":28517,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28518,"byte_end":28598,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28599,"byte_end":28643,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28644,"byte_end":28648,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28649,"byte_end":28661,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28662,"byte_end":28665,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain uninit bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28666,"byte_end":28757,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28758,"byte_end":28836,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28837,"byte_end":28866,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28867,"byte_end":28870,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28871,"byte_end":28911,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28912,"byte_end":28959,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":28960,"byte_end":29031,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29032,"byte_end":29094,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`, atomics, and any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29095,"byte_end":29192,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/   other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29193,"byte_end":29234,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and *only* reads. RustBelt's","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29235,"byte_end":29334,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/   separation logic is based on the notion that a type is allowed to define a sharing predicate,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29335,"byte_end":29434,"line_start":43,"line_end":43,"column_start":1,"column_end":100}},{"value":"/   its own invariant that must hold for shared references, and this predicate is the reasoning","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29435,"byte_end":29532,"line_start":44,"line_end":44,"column_start":1,"column_end":98}},{"value":"/   that allow it to deal with atomic and cells etc. We require the sharing predicate to be","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29533,"byte_end":29626,"line_start":45,"line_end":45,"column_start":1,"column_end":94}},{"value":"/   trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29627,"byte_end":29674,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29675,"byte_end":29733,"line_start":47,"line_end":47,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":556},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":29898,"byte_end":29965,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":29966,"byte_end":30011,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34710,"byte_end":34727,"line_start":121,"line_end":121,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be used\n in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing\n a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be used","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30092,"byte_end":30175,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30176,"byte_end":30261,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30262,"byte_end":30331,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30332,"byte_end":30431,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30432,"byte_end":30435,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30436,"byte_end":30514,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30515,"byte_end":30591,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement [`AnyBitPattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30592,"byte_end":30678,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ Then, we implement a function that checks wheter a certain instance","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30679,"byte_end":30750,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ of the `Bits` is also a valid bit pattern of `Self`. If this check passes, then we","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30751,"byte_end":30837,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ can allow casting from the `Bits` to `Self` (and therefore, any type which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30838,"byte_end":30916,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ is able to be cast to `Bits` is also able to be cast to `Self`).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30917,"byte_end":30985,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30986,"byte_end":30989,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T: AnyBitPattern` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":30990,"byte_end":31093,"line_start":19,"line_end":19,"column_start":1,"column_end":104}},{"value":"/ [`CheckedBitPattern`]. This means you can also use any [`AnyBitPattern`] type in the checked versions","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31094,"byte_end":31199,"line_start":20,"line_end":20,"column_start":1,"column_end":106}},{"value":"/ of casting functions in this module. If it's possible, prefer implementing [`AnyBitPattern`] for your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31200,"byte_end":31305,"line_start":21,"line_end":21,"column_start":1,"column_end":106}},{"value":"/ type directly instead of [`CheckedBitPattern`] as it gives greater flexibility.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31306,"byte_end":31389,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31390,"byte_end":31393,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31394,"byte_end":31406,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31407,"byte_end":31410,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31411,"byte_end":31508,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31509,"byte_end":31584,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31585,"byte_end":31665,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31666,"byte_end":31736,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31737,"byte_end":31740,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31741,"byte_end":31754,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31755,"byte_end":31758,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31759,"byte_end":31827,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31828,"byte_end":31831,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31832,"byte_end":31843,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31844,"byte_end":31892,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31893,"byte_end":31896,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31897,"byte_end":31913,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31914,"byte_end":31940,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31941,"byte_end":31958,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31959,"byte_end":31980,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":31981,"byte_end":32002,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32003,"byte_end":32024,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32025,"byte_end":32030,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32031,"byte_end":32034,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32035,"byte_end":32081,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32082,"byte_end":32106,"line_start":47,"line_end":47,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32107,"byte_end":32110,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32111,"byte_end":32164,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32165,"byte_end":32190,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32191,"byte_end":32225,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32226,"byte_end":32253,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32254,"byte_end":32267,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32268,"byte_end":32277,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32278,"byte_end":32283,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32284,"byte_end":32288,"line_start":56,"line_end":56,"column_start":1,"column_end":5}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32289,"byte_end":32377,"line_start":57,"line_end":57,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32378,"byte_end":32461,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32462,"byte_end":32550,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32551,"byte_end":32589,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32590,"byte_end":32597,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32598,"byte_end":32601,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32602,"byte_end":32661,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32662,"byte_end":32665,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32666,"byte_end":32677,"line_start":65,"line_end":65,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32678,"byte_end":32728,"line_start":66,"line_end":66,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32729,"byte_end":32747,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32748,"byte_end":32798,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32799,"byte_end":32818,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32819,"byte_end":32842,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32843,"byte_end":32866,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32867,"byte_end":32890,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32891,"byte_end":32898,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32899,"byte_end":32939,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32940,"byte_end":32988,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":32989,"byte_end":33015,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33016,"byte_end":33071,"line_start":77,"line_end":77,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33072,"byte_end":33099,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33100,"byte_end":33136,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33137,"byte_end":33166,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33167,"byte_end":33182,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33183,"byte_end":33194,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33195,"byte_end":33202,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33203,"byte_end":33246,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33247,"byte_end":33273,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33274,"byte_end":33277,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33278,"byte_end":33310,"line_start":87,"line_end":87,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33311,"byte_end":33369,"line_start":88,"line_end":88,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33370,"byte_end":33416,"line_start":89,"line_end":89,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33417,"byte_end":33420,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33421,"byte_end":33458,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33459,"byte_end":33493,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33494,"byte_end":33552,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33553,"byte_end":33582,"line_start":94,"line_end":94,"column_start":1,"column_end":30}},{"value":"/ ","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33583,"byte_end":33587,"line_start":95,"line_end":95,"column_start":1,"column_end":5}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33588,"byte_end":33672,"line_start":96,"line_end":96,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33673,"byte_end":33715,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33716,"byte_end":33742,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33743,"byte_end":33748,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33749,"byte_end":33817,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33818,"byte_end":33871,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33872,"byte_end":33910,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33911,"byte_end":33916,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33917,"byte_end":33946,"line_start":104,"line_end":104,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33947,"byte_end":33954,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33955,"byte_end":33958,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33959,"byte_end":33971,"line_start":107,"line_end":107,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33972,"byte_end":33975,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":33976,"byte_end":34051,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34052,"byte_end":34136,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34137,"byte_end":34216,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34217,"byte_end":34299,"line_start":112,"line_end":112,"column_start":1,"column_end":83}},{"value":"/   still think you know better, be careful and have fun. And don't mess it up","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34300,"byte_end":34380,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34381,"byte_end":34399,"line_start":114,"line_end":114,"column_start":1,"column_end":19}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34400,"byte_end":34481,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/   `bits` must also be valid for an instance of `Self`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34482,"byte_end":34540,"line_start":116,"line_end":116,"column_start":1,"column_end":59}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34541,"byte_end":34594,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34595,"byte_end":34598,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34599,"byte_end":34668,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34669,"byte_end":34692,"line_start":120,"line_end":120,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34984,"byte_end":34988,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34738,"byte_end":34811,"line_start":122,"line_end":122,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34814,"byte_end":34898,"line_start":123,"line_end":123,"column_start":3,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34901,"byte_end":34904,"line_start":124,"line_end":124,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34907,"byte_end":34976,"line_start":125,"line_end":125,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35104,"byte_end":35124,"line_start":129,"line_end":129,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"pub fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":117},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35008,"byte_end":35098,"line_start":128,"line_end":128,"column_start":3,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35907,"byte_end":35919,"line_start":166,"line_end":166,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35856,"byte_end":35904,"line_start":165,"line_end":165,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36194,"byte_end":36211,"line_start":171,"line_end":171,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the original\n data contains an invalid bit pattern. If so, the cast will fail and\n this error will be returned. Will never happen on casts between\n [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the original","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35944,"byte_end":36026,"line_start":167,"line_end":167,"column_start":3,"column_end":85}},{"value":"/ data contains an invalid bit pattern. If so, the cast will fail and","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36029,"byte_end":36100,"line_start":168,"line_end":168,"column_start":3,"column_end":74}},{"value":"/ this error will be returned. Will never happen on casts between","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36103,"byte_end":36170,"line_start":169,"line_end":169,"column_start":3,"column_end":70}},{"value":"/ [`Pod`] types.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36173,"byte_end":36191,"line_start":170,"line_end":170,"column_start":3,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35835,"byte_end":35851,"line_start":164,"line_end":164,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"pub enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":560}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data forms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35687,"byte_end":35774,"line_start":162,"line_end":162,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36898,"byte_end":36912,"line_start":197,"line_end":197,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"pub fn try_from_bytes<T: CheckedBitPattern>(&[u8])\n-> Result<&T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36645,"byte_end":36679,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36680,"byte_end":36683,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36684,"byte_end":36698,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36699,"byte_end":36702,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36703,"byte_end":36752,"line_start":193,"line_end":193,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36753,"byte_end":36821,"line_start":194,"line_end":194,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36822,"byte_end":36880,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36881,"byte_end":36890,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37501,"byte_end":37519,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: CheckedBitPattern + NoUninit>(&mut [u8])\n-> Result<&mut T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37240,"byte_end":37282,"line_start":209,"line_end":209,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37283,"byte_end":37286,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37287,"byte_end":37301,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37302,"byte_end":37305,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37306,"byte_end":37355,"line_start":213,"line_end":213,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37356,"byte_end":37424,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37425,"byte_end":37483,"line_start":215,"line_end":215,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37484,"byte_end":37493,"line_start":216,"line_end":216,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38075,"byte_end":38097,"line_start":235,"line_end":235,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: CheckedBitPattern>(&[u8])\n-> Result<T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37870,"byte_end":37917,"line_start":229,"line_end":229,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37918,"byte_end":37921,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37922,"byte_end":37936,"line_start":231,"line_end":231,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37937,"byte_end":37998,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":37999,"byte_end":38057,"line_start":233,"line_end":233,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38058,"byte_end":38067,"line_start":234,"line_end":234,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38842,"byte_end":38850,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"pub fn try_cast<A: NoUninit, B: CheckedBitPattern>(A)\n-> Result<B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38390,"byte_end":38419,"line_start":245,"line_end":245,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38420,"byte_end":38423,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38424,"byte_end":38501,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38502,"byte_end":38581,"line_start":248,"line_end":248,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38582,"byte_end":38660,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38661,"byte_end":38680,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38681,"byte_end":38684,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38685,"byte_end":38699,"line_start":252,"line_end":252,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38700,"byte_end":38703,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38704,"byte_end":38759,"line_start":254,"line_end":254,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38760,"byte_end":38824,"line_start":255,"line_end":255,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":38825,"byte_end":38834,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39394,"byte_end":39406,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: CheckedBitPattern>(&A)\n-> Result<&B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39136,"byte_end":39172,"line_start":269,"line_end":269,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39173,"byte_end":39176,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39177,"byte_end":39191,"line_start":271,"line_end":271,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39192,"byte_end":39195,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39196,"byte_end":39248,"line_start":273,"line_end":273,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39249,"byte_end":39311,"line_start":274,"line_end":274,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39312,"byte_end":39376,"line_start":275,"line_end":275,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39377,"byte_end":39386,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39848,"byte_end":39860,"line_start":293,"line_end":293,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\nNoUninit>(&mut A) -> Result<&mut B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39742,"byte_end":39786,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39787,"byte_end":39790,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39791,"byte_end":39830,"line_start":291,"line_end":291,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":39831,"byte_end":39840,"line_start":292,"line_end":292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41090,"byte_end":41104,"line_start":322,"line_end":322,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A])\n-> Result<&[B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40231,"byte_end":40304,"line_start":305,"line_end":305,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40305,"byte_end":40308,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40309,"byte_end":40368,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40369,"byte_end":40438,"line_start":308,"line_end":308,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40439,"byte_end":40442,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40443,"byte_end":40457,"line_start":310,"line_end":310,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40458,"byte_end":40461,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40462,"byte_end":40542,"line_start":312,"line_end":312,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40543,"byte_end":40563,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40564,"byte_end":40641,"line_start":314,"line_end":314,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40642,"byte_end":40718,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40719,"byte_end":40799,"line_start":316,"line_end":316,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40800,"byte_end":40824,"line_start":317,"line_end":317,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40825,"byte_end":40950,"line_start":318,"line_end":318,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40951,"byte_end":40971,"line_start":319,"line_end":319,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":40972,"byte_end":41072,"line_start":320,"line_end":320,"column_start":1,"column_end":101}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41073,"byte_end":41082,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41632,"byte_end":41650,"line_start":341,"line_end":341,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\nNoUninit>(&mut [A]) -> Result<&mut [B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41482,"byte_end":41554,"line_start":336,"line_end":336,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41555,"byte_end":41567,"line_start":337,"line_end":337,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41568,"byte_end":41571,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41572,"byte_end":41614,"line_start":339,"line_end":339,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":41615,"byte_end":41624,"line_start":340,"line_end":340,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42199,"byte_end":42209,"line_start":361,"line_end":361,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"pub fn from_bytes<T: CheckedBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42069,"byte_end":42103,"line_start":355,"line_end":355,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42104,"byte_end":42107,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42108,"byte_end":42121,"line_start":357,"line_end":357,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42122,"byte_end":42125,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42126,"byte_end":42181,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42182,"byte_end":42191,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42496,"byte_end":42510,"line_start":374,"line_end":374,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + CheckedBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42354,"byte_end":42396,"line_start":368,"line_end":368,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42397,"byte_end":42400,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42401,"byte_end":42414,"line_start":370,"line_end":370,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42415,"byte_end":42418,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42419,"byte_end":42478,"line_start":372,"line_end":372,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42479,"byte_end":42488,"line_start":373,"line_end":373,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42826,"byte_end":42844,"line_start":386,"line_end":386,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42682,"byte_end":42719,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42720,"byte_end":42723,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42724,"byte_end":42737,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42738,"byte_end":42808,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":42809,"byte_end":42818,"line_start":385,"line_end":385,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43147,"byte_end":43151,"line_start":399,"line_end":399,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"pub fn cast<A: NoUninit, B: CheckedBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43008,"byte_end":43029,"line_start":393,"line_end":393,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43030,"byte_end":43033,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43034,"byte_end":43047,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43048,"byte_end":43051,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43052,"byte_end":43129,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43130,"byte_end":43139,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43418,"byte_end":43426,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nCheckedBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43292,"byte_end":43324,"line_start":406,"line_end":406,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43325,"byte_end":43328,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43329,"byte_end":43342,"line_start":408,"line_end":408,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43343,"byte_end":43346,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43347,"byte_end":43400,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43401,"byte_end":43410,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43730,"byte_end":43738,"line_start":425,"line_end":425,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: CheckedBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43612,"byte_end":43636,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43637,"byte_end":43640,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43641,"byte_end":43654,"line_start":421,"line_end":421,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43655,"byte_end":43658,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43659,"byte_end":43712,"line_start":423,"line_end":423,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43713,"byte_end":43722,"line_start":424,"line_end":424,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44013,"byte_end":44023,"line_start":438,"line_end":438,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43889,"byte_end":43917,"line_start":432,"line_end":432,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43918,"byte_end":43921,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43922,"byte_end":43935,"line_start":434,"line_end":434,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43936,"byte_end":43939,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43940,"byte_end":43995,"line_start":436,"line_end":436,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":43996,"byte_end":44005,"line_start":437,"line_end":437,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44318,"byte_end":44332,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nCheckedBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44182,"byte_end":44218,"line_start":445,"line_end":445,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44219,"byte_end":44222,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44223,"byte_end":44236,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44237,"byte_end":44240,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44241,"byte_end":44300,"line_start":449,"line_end":449,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":44301,"byte_end":44310,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57509,"byte_end":57517,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":239}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57051,"byte_end":57102,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57103,"byte_end":57137,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57138,"byte_end":57141,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57142,"byte_end":57205,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57206,"byte_end":57262,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57263,"byte_end":57266,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57267,"byte_end":57280,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57281,"byte_end":57284,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57285,"byte_end":57326,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57327,"byte_end":57374,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57375,"byte_end":57448,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57449,"byte_end":57491,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57797,"byte_end":57803,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57529,"byte_end":57569,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57572,"byte_end":57575,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57578,"byte_end":57653,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57656,"byte_end":57734,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57737,"byte_end":57779,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57782,"byte_end":57791,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73643,"byte_end":73659,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73413,"byte_end":73479,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73480,"byte_end":73515,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73516,"byte_end":73519,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73520,"byte_end":73533,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73534,"byte_end":73537,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73538,"byte_end":73597,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73598,"byte_end":73625,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76228,"byte_end":76231,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74334,"byte_end":74372,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74373,"byte_end":74376,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74377,"byte_end":74454,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74455,"byte_end":74534,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74535,"byte_end":74615,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74616,"byte_end":74634,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74635,"byte_end":74638,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74639,"byte_end":74715,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74716,"byte_end":74787,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74788,"byte_end":74862,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74863,"byte_end":74881,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74882,"byte_end":74885,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74886,"byte_end":74899,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74900,"byte_end":74903,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74904,"byte_end":74944,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74945,"byte_end":74992,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":74993,"byte_end":75071,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75072,"byte_end":75100,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75101,"byte_end":75177,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75178,"byte_end":75256,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75257,"byte_end":75337,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75338,"byte_end":75368,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75369,"byte_end":75423,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75424,"byte_end":75499,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75500,"byte_end":75579,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75580,"byte_end":75624,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75625,"byte_end":75705,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75706,"byte_end":75764,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75765,"byte_end":75839,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75840,"byte_end":75917,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75918,"byte_end":75998,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":75999,"byte_end":76079,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76080,"byte_end":76159,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76160,"byte_end":76210,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90537,"byte_end":90548,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90211,"byte_end":90267,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90268,"byte_end":90303,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90304,"byte_end":90307,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90308,"byte_end":90321,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90322,"byte_end":90325,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90326,"byte_end":90390,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90391,"byte_end":90469,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90470,"byte_end":90519,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94423,"byte_end":94431,"line_start":67,"line_end":67,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91357,"byte_end":91435,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91436,"byte_end":91439,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91440,"byte_end":91497,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid, i.e.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91498,"byte_end":91582,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/ it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91583,"byte_end":91652,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91653,"byte_end":91732,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91733,"byte_end":91813,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of any other","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91814,"byte_end":91904,"line_start":24,"line_end":24,"column_start":1,"column_end":91}},{"value":"/ type, no casting of mutable references or mutable references to slices etc.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91905,"byte_end":91984,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91985,"byte_end":91988,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":91989,"byte_end":92063,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92064,"byte_end":92143,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92144,"byte_end":92228,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/ a type that is only [`NoUninit`], consider also implementing [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92229,"byte_end":92342,"line_start":30,"line_end":30,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92343,"byte_end":92346,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92347,"byte_end":92359,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92360,"byte_end":92363,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92364,"byte_end":92452,"line_start":34,"line_end":34,"column_start":1,"column_end":89}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92453,"byte_end":92528,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92529,"byte_end":92609,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92610,"byte_end":92687,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92688,"byte_end":92766,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92767,"byte_end":92770,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92771,"byte_end":92783,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92784,"byte_end":92787,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92788,"byte_end":92854,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be [`Zeroable`][crate::Zeroable]).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92855,"byte_end":92941,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* whem","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":92942,"byte_end":93020,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93021,"byte_end":93050,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93051,"byte_end":93054,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93055,"byte_end":93095,"line_start":47,"line_end":47,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93096,"byte_end":93143,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93144,"byte_end":93233,"line_start":49,"line_end":49,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93234,"byte_end":93314,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93315,"byte_end":93395,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93396,"byte_end":93411,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93412,"byte_end":93469,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93470,"byte_end":93543,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93544,"byte_end":93623,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93624,"byte_end":93668,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93669,"byte_end":93720,"line_start":57,"line_end":57,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93721,"byte_end":93766,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`, atomics, and any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93767,"byte_end":93864,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/   other forms of interior mutability.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93865,"byte_end":93906,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and *only* reads. RustBelt's","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":93907,"byte_end":94006,"line_start":61,"line_end":61,"column_start":1,"column_end":100}},{"value":"/   separation logic is based on the notion that a type is allowed to define a sharing predicate,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94007,"byte_end":94106,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/   its own invariant that must hold for shared references, and this predicate is the reasoning","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94107,"byte_end":94204,"line_start":63,"line_end":63,"column_start":1,"column_end":98}},{"value":"/   that allow it to deal with atomic and cells etc. We require the sharing predicate to be","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94205,"byte_end":94298,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/   trivial and permit only read-only access.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94299,"byte_end":94346,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94347,"byte_end":94405,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98107,"byte_end":98117,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95139,"byte_end":95167,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95168,"byte_end":95171,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95172,"byte_end":95247,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95248,"byte_end":95314,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95315,"byte_end":95359,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95360,"byte_end":95363,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95364,"byte_end":95443,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95444,"byte_end":95524,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95525,"byte_end":95587,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95588,"byte_end":95591,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95592,"byte_end":95670,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95671,"byte_end":95746,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95747,"byte_end":95775,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95776,"byte_end":95779,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95780,"byte_end":95793,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95794,"byte_end":95797,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95798,"byte_end":95805,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95806,"byte_end":95837,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95838,"byte_end":95853,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95854,"byte_end":95898,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95899,"byte_end":95913,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95914,"byte_end":95926,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95927,"byte_end":95939,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95940,"byte_end":95952,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95953,"byte_end":95965,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95966,"byte_end":95978,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95979,"byte_end":95984,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":95985,"byte_end":96021,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96022,"byte_end":96042,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96043,"byte_end":96084,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96085,"byte_end":96126,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96127,"byte_end":96132,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96133,"byte_end":96187,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96188,"byte_end":96231,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96232,"byte_end":96273,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96274,"byte_end":96281,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96282,"byte_end":96294,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96295,"byte_end":96298,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96299,"byte_end":96372,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96373,"byte_end":96386,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96387,"byte_end":96390,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96391,"byte_end":96468,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96469,"byte_end":96548,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96549,"byte_end":96603,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96604,"byte_end":96607,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96608,"byte_end":96688,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96689,"byte_end":96711,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96712,"byte_end":96715,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96716,"byte_end":96796,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96797,"byte_end":96853,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96854,"byte_end":96857,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96858,"byte_end":96933,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":96934,"byte_end":97006,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97007,"byte_end":97076,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97077,"byte_end":97080,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97081,"byte_end":97159,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97160,"byte_end":97236,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97237,"byte_end":97248,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97249,"byte_end":97252,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97253,"byte_end":97325,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97326,"byte_end":97404,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97405,"byte_end":97481,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97482,"byte_end":97561,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97562,"byte_end":97565,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97566,"byte_end":97638,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97639,"byte_end":97704,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97705,"byte_end":97708,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97709,"byte_end":97786,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97787,"byte_end":97809,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97810,"byte_end":97813,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97814,"byte_end":97893,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97894,"byte_end":97927,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97928,"byte_end":97931,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":97932,"byte_end":98009,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98010,"byte_end":98089,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98942,"byte_end":98945,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98138,"byte_end":98209,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98212,"byte_end":98221,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98224,"byte_end":98227,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98230,"byte_end":98302,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98305,"byte_end":98371,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98374,"byte_end":98442,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98445,"byte_end":98487,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98490,"byte_end":98493,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98496,"byte_end":98573,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98576,"byte_end":98598,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98601,"byte_end":98604,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98607,"byte_end":98676,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98679,"byte_end":98755,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98758,"byte_end":98827,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98830,"byte_end":98868,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98871,"byte_end":98874,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98877,"byte_end":98934,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99036,"byte_end":99045,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98962,"byte_end":99027,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99135,"byte_end":99144,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99061,"byte_end":99126,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99809,"byte_end":99821,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99160,"byte_end":99228,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99231,"byte_end":99294,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99297,"byte_end":99300,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99303,"byte_end":99377,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99380,"byte_end":99447,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99450,"byte_end":99518,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99521,"byte_end":99524,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99527,"byte_end":99539,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99542,"byte_end":99545,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99548,"byte_end":99621,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99624,"byte_end":99670,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99673,"byte_end":99676,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99679,"byte_end":99753,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99756,"byte_end":99791,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":99794,"byte_end":99803,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101344,"byte_end":101356,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":450},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100660,"byte_end":100735,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100738,"byte_end":100814,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100817,"byte_end":100829,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100832,"byte_end":100835,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100838,"byte_end":100912,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100915,"byte_end":100982,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":100985,"byte_end":101053,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101056,"byte_end":101059,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101062,"byte_end":101074,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101077,"byte_end":101080,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101083,"byte_end":101156,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101159,"byte_end":101205,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101208,"byte_end":101211,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101214,"byte_end":101288,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101291,"byte_end":101326,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":101329,"byte_end":101338,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111490,"byte_end":111508,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108401,"byte_end":108476,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108477,"byte_end":108506,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108507,"byte_end":108510,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108511,"byte_end":108583,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108584,"byte_end":108662,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108663,"byte_end":108741,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108742,"byte_end":108818,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108819,"byte_end":108895,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108896,"byte_end":108944,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108945,"byte_end":108948,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108949,"byte_end":108961,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108962,"byte_end":108965,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":108966,"byte_end":109035,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109036,"byte_end":109039,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109040,"byte_end":109111,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109112,"byte_end":109115,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109116,"byte_end":109188,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109189,"byte_end":109251,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109252,"byte_end":109331,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109332,"byte_end":109411,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109412,"byte_end":109442,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109443,"byte_end":109446,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109447,"byte_end":109527,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109528,"byte_end":109589,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109590,"byte_end":109593,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109594,"byte_end":109668,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109669,"byte_end":109684,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109685,"byte_end":109763,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109764,"byte_end":109842,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109843,"byte_end":109846,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109847,"byte_end":109918,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109919,"byte_end":109922,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109923,"byte_end":109937,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109938,"byte_end":109941,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":109942,"byte_end":110021,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110022,"byte_end":110101,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110102,"byte_end":110177,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110178,"byte_end":110247,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110248,"byte_end":110285,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110286,"byte_end":110289,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110290,"byte_end":110368,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110369,"byte_end":110437,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110438,"byte_end":110441,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110442,"byte_end":110456,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110457,"byte_end":110460,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110461,"byte_end":110473,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110474,"byte_end":110477,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110478,"byte_end":110485,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110486,"byte_end":110523,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110524,"byte_end":110548,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110549,"byte_end":110578,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110579,"byte_end":110582,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110583,"byte_end":110607,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110608,"byte_end":110641,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110642,"byte_end":110645,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110646,"byte_end":110709,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110710,"byte_end":110713,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110714,"byte_end":110773,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110774,"byte_end":110812,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110813,"byte_end":110873,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110874,"byte_end":110877,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110878,"byte_end":110905,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110906,"byte_end":110952,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":110953,"byte_end":111025,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111026,"byte_end":111029,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111030,"byte_end":111087,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111088,"byte_end":111095,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111096,"byte_end":111099,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111100,"byte_end":111139,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111140,"byte_end":111143,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111144,"byte_end":111151,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111152,"byte_end":111189,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111190,"byte_end":111193,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111194,"byte_end":111218,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111219,"byte_end":111244,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111245,"byte_end":111248,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111249,"byte_end":111307,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111308,"byte_end":111311,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111312,"byte_end":111355,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111356,"byte_end":111389,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111390,"byte_end":111393,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111394,"byte_end":111424,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111425,"byte_end":111464,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111465,"byte_end":111472,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111595,"byte_end":111599,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111528,"byte_end":111577,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111580,"byte_end":111589,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111911,"byte_end":111919,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111808,"byte_end":111881,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111884,"byte_end":111893,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":111896,"byte_end":111905,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":112609,"byte_end":112617,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":112490,"byte_end":112567,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":112570,"byte_end":112591,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":112594,"byte_end":112603,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113281,"byte_end":113291,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113192,"byte_end":113263,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113266,"byte_end":113275,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113835,"byte_end":113849,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113724,"byte_end":113797,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113800,"byte_end":113817,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":113820,"byte_end":113829,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114355,"byte_end":114359,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114288,"byte_end":114337,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114340,"byte_end":114349,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114564,"byte_end":114572,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114461,"byte_end":114534,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114537,"byte_end":114546,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":114549,"byte_end":114558,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115262,"byte_end":115270,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115143,"byte_end":115219,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115222,"byte_end":115244,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115247,"byte_end":115256,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115934,"byte_end":115944,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115845,"byte_end":115916,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":115919,"byte_end":115928,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116489,"byte_end":116503,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116378,"byte_end":116453,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116456,"byte_end":116471,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116474,"byte_end":116483,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3666,"byte_end":3706,"line_start":124,"line_end":124,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3543,"byte_end":3615,"line_start":122,"line_end":122,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3618,"byte_end":3663,"line_start":123,"line_end":123,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3892,"byte_end":3916,"line_start":128,"line_end":128,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3710,"byte_end":3778,"line_start":125,"line_end":125,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3781,"byte_end":3856,"line_start":126,"line_end":126,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3859,"byte_end":3889,"line_start":127,"line_end":127,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4137,"byte_end":4149,"line_start":132,"line_end":132,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3920,"byte_end":3995,"line_start":129,"line_end":129,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3998,"byte_end":4071,"line_start":130,"line_end":130,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4074,"byte_end":4134,"line_start":131,"line_end":131,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4440,"byte_end":4457,"line_start":139,"line_end":139,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4153,"byte_end":4227,"line_start":133,"line_end":133,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4230,"byte_end":4261,"line_start":134,"line_end":134,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4264,"byte_end":4267,"line_start":135,"line_end":135,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4270,"byte_end":4346,"line_start":136,"line_end":136,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4349,"byte_end":4424,"line_start":137,"line_end":137,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4427,"byte_end":4437,"line_start":138,"line_end":138,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3526,"byte_end":3538,"line_start":121,"line_end":121,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":3392,"byte_end":3465,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4932,"byte_end":4940,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: NoUninit>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4723,"byte_end":4757,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4758,"byte_end":4761,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4762,"byte_end":4840,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4841,"byte_end":4914,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4915,"byte_end":4924,"line_start":154,"line_end":154,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5227,"byte_end":5239,"line_start":164,"line_end":164,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: NoUninit + AnyBitPattern>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5010,"byte_end":5052,"line_start":159,"line_end":159,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5053,"byte_end":5056,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5057,"byte_end":5135,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5136,"byte_end":5209,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5210,"byte_end":5219,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5467,"byte_end":5477,"line_start":174,"line_end":174,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: AnyBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5337,"byte_end":5371,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5372,"byte_end":5375,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5376,"byte_end":5389,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5390,"byte_end":5393,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5394,"byte_end":5449,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5450,"byte_end":5459,"line_start":173,"line_end":173,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5696,"byte_end":5710,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5554,"byte_end":5596,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5597,"byte_end":5600,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5601,"byte_end":5614,"line_start":180,"line_end":180,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5615,"byte_end":5618,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5619,"byte_end":5678,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5679,"byte_end":5688,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5956,"byte_end":5978,"line_start":193,"line_end":193,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: AnyBitPattern>(&[u8])\n-> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5810,"byte_end":5857,"line_start":188,"line_end":188,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5858,"byte_end":5861,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5862,"byte_end":5876,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5877,"byte_end":5938,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":5939,"byte_end":5948,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6245,"byte_end":6263,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6101,"byte_end":6138,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6139,"byte_end":6142,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6143,"byte_end":6156,"line_start":201,"line_end":201,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6157,"byte_end":6227,"line_start":202,"line_end":202,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6228,"byte_end":6237,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6549,"byte_end":6563,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: AnyBitPattern>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6355,"byte_end":6389,"line_start":208,"line_end":208,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6390,"byte_end":6393,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6394,"byte_end":6408,"line_start":210,"line_end":210,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6409,"byte_end":6412,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6413,"byte_end":6462,"line_start":212,"line_end":212,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6463,"byte_end":6531,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6532,"byte_end":6541,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6868,"byte_end":6886,"line_start":226,"line_end":226,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8])\n-> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6666,"byte_end":6708,"line_start":219,"line_end":219,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6709,"byte_end":6712,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6713,"byte_end":6727,"line_start":221,"line_end":221,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6728,"byte_end":6731,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6732,"byte_end":6781,"line_start":223,"line_end":223,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6782,"byte_end":6850,"line_start":224,"line_end":224,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":6851,"byte_end":6860,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7156,"byte_end":7160,"line_start":238,"line_end":238,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: NoUninit, B: AnyBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7017,"byte_end":7038,"line_start":232,"line_end":232,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7039,"byte_end":7042,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7043,"byte_end":7056,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7057,"byte_end":7060,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7061,"byte_end":7138,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7139,"byte_end":7148,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7365,"byte_end":7373,"line_start":248,"line_end":248,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7239,"byte_end":7271,"line_start":242,"line_end":242,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7272,"byte_end":7275,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7276,"byte_end":7289,"line_start":244,"line_end":244,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7290,"byte_end":7293,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7294,"byte_end":7347,"line_start":246,"line_end":246,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7348,"byte_end":7357,"line_start":247,"line_end":247,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7616,"byte_end":7624,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: AnyBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7498,"byte_end":7522,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7523,"byte_end":7526,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7527,"byte_end":7540,"line_start":256,"line_end":256,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7541,"byte_end":7544,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7545,"byte_end":7598,"line_start":258,"line_end":258,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7599,"byte_end":7608,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7833,"byte_end":7843,"line_start":270,"line_end":270,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: AnyBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7709,"byte_end":7737,"line_start":264,"line_end":264,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7738,"byte_end":7741,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7742,"byte_end":7755,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7756,"byte_end":7759,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7760,"byte_end":7815,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7816,"byte_end":7825,"line_start":269,"line_end":269,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8070,"byte_end":8084,"line_start":280,"line_end":280,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7934,"byte_end":7970,"line_start":274,"line_end":274,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7971,"byte_end":7974,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7975,"byte_end":7988,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7989,"byte_end":7992,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":7993,"byte_end":8052,"line_start":278,"line_end":278,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8053,"byte_end":8062,"line_start":279,"line_end":279,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8301,"byte_end":8313,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: NoUninit, U: AnyBitPattern>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8226,"byte_end":8283,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8284,"byte_end":8293,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8502,"byte_end":8518,"line_start":299,"line_end":299,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: NoUninit + AnyBitPattern, U: NoUninit +\nAnyBitPattern>(&mut [T]) -> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8423,"byte_end":8484,"line_start":297,"line_end":297,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8485,"byte_end":8494,"line_start":298,"line_end":298,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9069,"byte_end":9077,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: NoUninit, B: AnyBitPattern>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8682,"byte_end":8711,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8712,"byte_end":8715,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8716,"byte_end":8793,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8794,"byte_end":8873,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8874,"byte_end":8952,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8953,"byte_end":8972,"line_start":313,"line_end":313,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8973,"byte_end":8976,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8977,"byte_end":8991,"line_start":315,"line_end":315,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8992,"byte_end":8995,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":8996,"byte_end":9051,"line_start":317,"line_end":317,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9052,"byte_end":9061,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9380,"byte_end":9392,"line_start":332,"line_end":332,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: AnyBitPattern>(&A)\n-> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9187,"byte_end":9223,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9224,"byte_end":9227,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9228,"byte_end":9242,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9243,"byte_end":9246,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9247,"byte_end":9299,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9300,"byte_end":9362,"line_start":330,"line_end":330,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9363,"byte_end":9372,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9610,"byte_end":9622,"line_start":342,"line_end":342,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9508,"byte_end":9552,"line_start":338,"line_end":338,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9553,"byte_end":9556,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9557,"byte_end":9592,"line_start":340,"line_end":340,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9593,"byte_end":9602,"line_start":341,"line_end":341,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10538,"byte_end":10552,"line_start":367,"line_end":367,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: AnyBitPattern>(&[A])\n-> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9780,"byte_end":9853,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9854,"byte_end":9857,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9858,"byte_end":9917,"line_start":353,"line_end":353,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9918,"byte_end":9987,"line_start":354,"line_end":354,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9988,"byte_end":9991,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":9992,"byte_end":10006,"line_start":356,"line_end":356,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10007,"byte_end":10010,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10011,"byte_end":10091,"line_start":358,"line_end":358,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10092,"byte_end":10112,"line_start":359,"line_end":359,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10113,"byte_end":10190,"line_start":360,"line_end":360,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10191,"byte_end":10267,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10268,"byte_end":10348,"line_start":362,"line_end":362,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10349,"byte_end":10373,"line_start":363,"line_end":363,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10374,"byte_end":10499,"line_start":364,"line_end":364,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10500,"byte_end":10520,"line_start":365,"line_end":365,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10521,"byte_end":10530,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10820,"byte_end":10838,"line_start":378,"line_end":378,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\nAnyBitPattern>(&mut [A]) -> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10674,"byte_end":10746,"line_start":373,"line_end":373,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10747,"byte_end":10759,"line_start":374,"line_end":374,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10760,"byte_end":10763,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10764,"byte_end":10802,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":10803,"byte_end":10812,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":26715,"byte_end":26716,"line_start":415,"line_end":415,"column_start":74,"column_end":75},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29842,"byte_end":29843,"line_start":50,"line_end":50,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35208,"byte_end":35209,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36279,"byte_end":36295,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36521,"byte_end":36537,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58444,"byte_end":58452,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58576,"byte_end":58587,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58619,"byte_end":58632,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58674,"byte_end":58686,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72336,"byte_end":72343,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72411,"byte_end":72417,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72485,"byte_end":72492,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72560,"byte_end":72567,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72635,"byte_end":72641,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72709,"byte_end":72716,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73399,"byte_end":73405,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73704,"byte_end":73713,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73750,"byte_end":73760,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73797,"byte_end":73807,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73844,"byte_end":73854,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73891,"byte_end":73902,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73939,"byte_end":73951,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73988,"byte_end":73997,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74034,"byte_end":74044,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74081,"byte_end":74091,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74128,"byte_end":74138,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74175,"byte_end":74186,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74223,"byte_end":74235,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74276,"byte_end":74283,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76699,"byte_end":76707,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77007,"byte_end":77018,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77045,"byte_end":77058,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77090,"byte_end":77102,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89209,"byte_end":89216,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89279,"byte_end":89285,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89348,"byte_end":89355,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89418,"byte_end":89425,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89488,"byte_end":89494,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89557,"byte_end":89564,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90197,"byte_end":90203,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90616,"byte_end":90625,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90657,"byte_end":90667,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90699,"byte_end":90709,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90741,"byte_end":90751,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90783,"byte_end":90794,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90826,"byte_end":90838,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90870,"byte_end":90879,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90911,"byte_end":90921,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90953,"byte_end":90963,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90995,"byte_end":91005,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":91037,"byte_end":91048,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":91080,"byte_end":91092,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94493,"byte_end":94494,"line_start":69,"line_end":69,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94592,"byte_end":94601,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94630,"byte_end":94639,"line_start":76,"line_end":76,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94668,"byte_end":94678,"line_start":77,"line_end":77,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94707,"byte_end":94717,"line_start":78,"line_end":78,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94746,"byte_end":94756,"line_start":79,"line_end":79,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94785,"byte_end":94795,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94824,"byte_end":94834,"line_start":81,"line_end":81,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94863,"byte_end":94873,"line_start":82,"line_end":82,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94902,"byte_end":94913,"line_start":83,"line_end":83,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94942,"byte_end":94953,"line_start":84,"line_end":84,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94982,"byte_end":94994,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":95023,"byte_end":95035,"line_start":86,"line_end":86,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116995,"byte_end":117003,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2729,"byte_end":2739,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":102}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":23548,"byte_end":23566,"line_start":316,"line_end":316,"column_start":51,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":463},"to":{"krate":0,"index":80}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\allocation.rs","byte_start":26715,"byte_end":26716,"line_start":415,"line_end":415,"column_start":74,"column_end":75},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":88},"to":{"krate":0,"index":80}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29766,"byte_end":29774,"line_start":48,"line_end":48,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29777,"byte_end":29782,"line_start":48,"line_end":48,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29785,"byte_end":29789,"line_start":48,"line_end":48,"column_start":52,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\anybitpattern.rs","byte_start":29842,"byte_end":29843,"line_start":50,"line_end":50,"column_start":39,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":100},"to":{"krate":0,"index":98}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":34729,"byte_end":34733,"line_start":121,"line_end":121,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":117}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":35208,"byte_end":35209,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":121},"to":{"krate":0,"index":117}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36279,"byte_end":36295,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":9609}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\checked.rs","byte_start":36521,"byte_end":36537,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":556},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":57519,"byte_end":57524,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58444,"byte_end":58452,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58576,"byte_end":58587,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58619,"byte_end":58632,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":37477},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":58674,"byte_end":58686,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":31291},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72336,"byte_end":72343,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":51774},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72411,"byte_end":72417,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":51783},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72485,"byte_end":72492,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":51794},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72560,"byte_end":72567,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":51803},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72635,"byte_end":72641,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":51814},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable.rs","byte_start":72709,"byte_end":72716,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":51829},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73399,"byte_end":73405,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":45971},"to":{"krate":0,"index":238}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73661,"byte_end":73666,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73704,"byte_end":73713,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73750,"byte_end":73760,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73797,"byte_end":73807,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73844,"byte_end":73854,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73891,"byte_end":73902,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73939,"byte_end":73951,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":73988,"byte_end":73997,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74034,"byte_end":74044,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74081,"byte_end":74091,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74128,"byte_end":74138,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74175,"byte_end":74186,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74223,"byte_end":74235,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\zeroable_in_option.rs","byte_start":74276,"byte_end":74283,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":2205},"to":{"krate":0,"index":323}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76233,"byte_end":76241,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76244,"byte_end":76248,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":76699,"byte_end":76707,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77007,"byte_end":77018,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":3042},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77045,"byte_end":77058,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":37477},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":77090,"byte_end":77102,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":31291},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89209,"byte_end":89216,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":51774},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89279,"byte_end":89285,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":51783},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89348,"byte_end":89355,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":51794},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89418,"byte_end":89425,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":51803},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89488,"byte_end":89494,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":51814},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod.rs","byte_start":89557,"byte_end":89564,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":51829},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90197,"byte_end":90203,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":45971},"to":{"krate":0,"index":341}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90550,"byte_end":90566,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":323},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90569,"byte_end":90573,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90616,"byte_end":90625,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90657,"byte_end":90667,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90699,"byte_end":90709,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90741,"byte_end":90751,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90783,"byte_end":90794,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90826,"byte_end":90838,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90870,"byte_end":90879,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90911,"byte_end":90921,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90953,"byte_end":90963,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":90995,"byte_end":91005,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":91037,"byte_end":91048,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\pod_in_option.rs","byte_start":91080,"byte_end":91092,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":375}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94433,"byte_end":94438,"line_start":67,"line_end":67,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94441,"byte_end":94445,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94493,"byte_end":94494,"line_start":69,"line_end":69,"column_start":34,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":432},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94592,"byte_end":94601,"line_start":75,"line_end":75,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":23573},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94630,"byte_end":94639,"line_start":76,"line_end":76,"column_start":26,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":1,"index":23765},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94668,"byte_end":94678,"line_start":77,"line_end":77,"column_start":26,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":23605},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94707,"byte_end":94717,"line_start":78,"line_end":78,"column_start":26,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":23797},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94746,"byte_end":94756,"line_start":79,"line_end":79,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":23637},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94785,"byte_end":94795,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":23829},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94824,"byte_end":94834,"line_start":81,"line_end":81,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":23669},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94863,"byte_end":94873,"line_start":82,"line_end":82,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":23861},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94902,"byte_end":94913,"line_start":83,"line_end":83,"column_start":26,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":23701},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94942,"byte_end":94953,"line_start":84,"line_end":84,"column_start":26,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":23893},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":94982,"byte_end":94994,"line_start":85,"line_end":85,"column_start":26,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":23733},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\no_uninit.rs","byte_start":95023,"byte_end":95035,"line_start":86,"line_end":86,"column_start":26,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":23925},"to":{"krate":0,"index":430}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\contiguous.rs","byte_start":98119,"byte_end":98123,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":450}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\transparent.rs","byte_start":116995,"byte_end":117003,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":118}},"from":{"krate":1,"index":27044},"to":{"krate":0,"index":463}},{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.11.0\\src\\lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":905},"to":{"krate":1,"index":9609}}]}