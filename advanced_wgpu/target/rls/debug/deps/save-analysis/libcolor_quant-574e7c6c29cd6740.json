{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0","program":"C:\\Users\\milla\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","color_quant","C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=574e7c6c29cd6740","-C","extra-filename=-574e7c6c29cd6740","--out-dir","c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\milla\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\milla\\Desktop\\coding\\LearningWGPU\\advanced_wgpu\\target\\rls\\debug\\deps\\libcolor_quant-574e7c6c29cd6740.rmeta"},"prelude":{"crate_id":{"name":"color_quant","disambiguator":[2961336796861554545,0]},"crate_root":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src","external_crates":[{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}}],"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2445,"byte_end":17142,"line_start":53,"line_end":480,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2445,"byte_end":17142,"line_start":53,"line_end":480,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":34}],"decl_id":null,"docs":" # Color quantization library","sig":null,"attributes":[{"value":"/ # Color quantization library","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2445,"byte_end":2477,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2478,"byte_end":2481,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This library provides a color quantizer based on the [NEUQUANT](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2482,"byte_end":2602,"line_start":55,"line_end":55,"column_start":1,"column_end":121}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2603,"byte_end":2606,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Original literature: Dekker, A. H. (1994). Kohonen neural networks for","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2607,"byte_end":2681,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/ optimal colour quantization. *Network: Computation in Neural Systems*, 5(3), 351-367.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2682,"byte_end":2771,"line_start":58,"line_end":58,"column_start":1,"column_end":90}},{"value":"/ [doi: 10.1088/0954-898X_5_3_003](https://doi.org/10.1088/0954-898X_5_3_003)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2772,"byte_end":2851,"line_start":59,"line_end":59,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2852,"byte_end":2855,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2856,"byte_end":2960,"line_start":61,"line_end":61,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2961,"byte_end":2964,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2965,"byte_end":2977,"line_start":63,"line_end":63,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2978,"byte_end":2981,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2982,"byte_end":2989,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ let data = vec![0; 40];","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":2990,"byte_end":3017,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/ let nq = color_quant::NeuQuant::new(10, 256, &data);","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":3018,"byte_end":3074,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/ let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":3075,"byte_end":3161,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"/ let color_map = nq.color_map_rgba();","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":3162,"byte_end":3202,"line_start":69,"line_end":69,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":3203,"byte_end":3210,"line_start":70,"line_end":70,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":3879,"byte_end":3887,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4558,"byte_end":4561,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neuronal network and trains it with the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new neuronal network and trains it with the supplied data.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4108,"byte_end":4180,"line_start":114,"line_end":114,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4185,"byte_end":4188,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Pixels are assumed to be in RGBA format.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4193,"byte_end":4237,"line_start":116,"line_end":116,"column_start":5,"column_end":49}},{"value":"/ `colors` should be $>=64$. `samplefac` determines the faction of","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4242,"byte_end":4310,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ the sample that will be used to train the network. Its value must be in the","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4315,"byte_end":4394,"line_start":118,"line_end":118,"column_start":5,"column_end":84}},{"value":"/ range $[1, 30]$. A value of $1$ thus produces the best result but is also","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4399,"byte_end":4476,"line_start":119,"line_end":119,"column_start":5,"column_end":82}},{"value":"/ slowest. $10$ is a good compromise between speed and quality.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4481,"byte_end":4546,"line_start":120,"line_end":120,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":5180,"byte_end":5184,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neuronal network and trains it with the supplied data.","sig":null,"attributes":[{"value":"/ Initializes the neuronal network and trains it with the supplied data.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":5038,"byte_end":5112,"line_start":136,"line_end":136,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":5117,"byte_end":5120,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This method gets called by `Self::new`.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":5125,"byte_end":5168,"line_start":138,"line_end":138,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6183,"byte_end":6192,"line_start":171,"line_end":171,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the rgba-pixel in-place to the best-matching color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps the rgba-pixel in-place to the best-matching color in the color map.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6072,"byte_end":6149,"line_start":169,"line_end":169,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6154,"byte_end":6171,"line_start":170,"line_end":170,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6707,"byte_end":6715,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map.","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6565,"byte_end":6616,"line_start":181,"line_end":181,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6621,"byte_end":6624,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ `pixel` is assumed to be in RGBA format.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6629,"byte_end":6673,"line_start":183,"line_end":183,"column_start":5,"column_end":49}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6678,"byte_end":6695,"line_start":184,"line_end":184,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6975,"byte_end":6981,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" Lookup pixel values for color at `idx` in the colormap.\n","sig":null,"attributes":[{"value":"/ Lookup pixel values for color at `idx` in the colormap.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":6904,"byte_end":6963,"line_start":191,"line_end":191,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":7214,"byte_end":7228,"line_start":199,"line_end":199,"column_start":12,"column_end":26},"name":"color_map_rgba","qualname":"<NeuQuant>::color_map_rgba","value":"pub fn color_map_rgba(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the RGBA color map calculated from the sample.\n","sig":null,"attributes":[{"value":"/ Returns the RGBA color map calculated from the sample.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":7144,"byte_end":7202,"line_start":198,"line_end":198,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":7598,"byte_end":7611,"line_start":211,"line_end":211,"column_start":12,"column_end":25},"name":"color_map_rgb","qualname":"<NeuQuant>::color_map_rgb","value":"pub fn color_map_rgb(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the RGBA color map calculated from the sample.\n","sig":null,"attributes":[{"value":"/ Returns the RGBA color map calculated from the sample.","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":7528,"byte_end":7586,"line_start":210,"line_end":210,"column_start":5,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4093,"byte_end":4101,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\milla\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\color_quant-1.1.0\\src\\lib.rs","byte_start":4093,"byte_end":4101,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":4294967295,"index":4294967295}}]}